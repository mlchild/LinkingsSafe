// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.deposit.validateImages()
    storyboard.deposit.validateViewControllers()
    storyboard.contest.validateImages()
    storyboard.contest.validateViewControllers()
    storyboard.profile.validateImages()
    storyboard.profile.validateViewControllers()
    storyboard.login.validateImages()
    storyboard.login.validateViewControllers()
    storyboard.compose.validateImages()
    storyboard.compose.validateViewControllers()
    storyboard.root.validateImages()
    storyboard.root.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
  }
  
  struct file {
    static var iTCAvantGardeGothicProBoldObliqueOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-BoldOblique", withExtension: "otf") }
    static var iTCAvantGardeGothicProBoldOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-Bold", withExtension: "otf") }
    static var iTCAvantGardeGothicProBookObliqueOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-BookOblique", withExtension: "otf") }
    static var iTCAvantGardeGothicProBookOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-Book", withExtension: "otf") }
    static var iTCAvantGardeGothicProDemiObliqueOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-DemiOblique", withExtension: "otf") }
    static var iTCAvantGardeGothicProDemiOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-Demi", withExtension: "otf") }
    static var iTCAvantGardeGothicProExtraLightObliqueOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-ExtraLightOblique", withExtension: "otf") }
    static var iTCAvantGardeGothicProExtraLightOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-ExtraLight", withExtension: "otf") }
    static var iTCAvantGardeGothicProMediumObliqueOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-MediumOblique", withExtension: "otf") }
    static var iTCAvantGardeGothicProMediumOtf: NSURL? { return _R.hostingBundle?.URLForResource("ITCAvantGardeGothicPro-Medium", withExtension: "otf") }
    static var infoPlist: NSURL? { return _R.hostingBundle?.URLForResource("Info", withExtension: "plist") }
  }
  
  struct font {
    static func iTCAvantGardeGothicProBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-Bold", size: size)
    }
    
    static func iTCAvantGardeGothicProBoldOblique(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-BoldOblique", size: size)
    }
    
    static func iTCAvantGardeGothicProBook(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-Book", size: size)
    }
    
    static func iTCAvantGardeGothicProBookOblique(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-BookOblique", size: size)
    }
    
    static func iTCAvantGardeGothicProDemi(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-Demi", size: size)
    }
    
    static func iTCAvantGardeGothicProDemiOblique(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-DemiOblique", size: size)
    }
    
    static func iTCAvantGardeGothicProExtraLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-ExtraLight", size: size)
    }
    
    static func iTCAvantGardeGothicProExtraLightOblique(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-ExtraLightOblique", size: size)
    }
    
    static func iTCAvantGardeGothicProMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-Medium", size: size)
    }
    
    static func iTCAvantGardeGothicProMediumOblique(size size: CGFloat) -> UIFont? {
      return UIFont(name: "ITCAvantGardeGothicPro-MediumOblique", size: size)
    }
  }
  
  struct image {
    static var comment: UIImage? { return UIImage(named: "Comment", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var facebook: UIImage? { return UIImage(named: "Facebook", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var profile: UIImage? { return UIImage(named: "Profile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var profileTab: UIImage? { return UIImage(named: "Profile Tab", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var upvote: UIImage? { return UIImage(named: "Upvote", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var upvoteLarge: UIImage? { return UIImage(named: "Upvote Large", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var upvoted: UIImage? { return UIImage(named: "Upvoted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
  }
  
  struct nib {
    
  }
  
  struct reuseIdentifier {
    static var contestTitleCell: ReuseIdentifier<ContestTitleCell> { return ReuseIdentifier(identifier: "Contest Title Cell") }
    static var depositTextCellSimple: ReuseIdentifier<TextTableCell> { return ReuseIdentifier(identifier: "Deposit Text Cell Simple") }
    static var finishTextCellSimple: ReuseIdentifier<TextTableCell> { return ReuseIdentifier(identifier: "Finish Text Cell Simple") }
    static var multilineTextCell: ReuseIdentifier<MultilineTextInputTableCell> { return ReuseIdentifier(identifier: "Multiline Text Cell") }
    static var postCell: ReuseIdentifier<PostTableCell> { return ReuseIdentifier(identifier: "Post Cell") }
    static var postCellProfile: ReuseIdentifier<PostTableCell> { return ReuseIdentifier(identifier: "Post Cell Profile") }
    static var profileActivityTypeSegCell: ReuseIdentifier<SegButtonCell> { return ReuseIdentifier(identifier: "Profile Activity Type Seg Cell") }
    static var profileTextCellSimple: ReuseIdentifier<TextTableCell> { return ReuseIdentifier(identifier: "Profile Text Cell Simple") }
    static var textFieldCell: ReuseIdentifier<TextFieldTableCell> { return ReuseIdentifier(identifier: "Text Field Cell") }
    static var userInfoCellComplex: ReuseIdentifier<UITableViewCell> { return ReuseIdentifier(identifier: "User Info Cell Complex") }
  }
  
  struct segue {
    struct loginVC {
      static var showMain: StoryboardSegueIdentifier<UIStoryboardSegue, LoginVC, UIViewController> { return StoryboardSegueIdentifier(identifier: "showMain") }
    }
    
    struct profileTVC {
      static var showDeposit: StoryboardSegueIdentifier<UIStoryboardSegue, ProfileTVC, UIViewController> { return StoryboardSegueIdentifier(identifier: "showDeposit") }
    }
    
    struct rootViewController {
      static var login: StoryboardSegueIdentifier<UIStoryboardSegue, RootViewController, UIViewController> { return StoryboardSegueIdentifier(identifier: "login") }
      static var showMain: StoryboardSegueIdentifier<UIStoryboardSegue, RootViewController, UIViewController> { return StoryboardSegueIdentifier(identifier: "showMain") }
    }
  }
  
  struct storyboard {
    struct compose {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Compose", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct contest {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Contest", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "Upvote Large") != nil, "[R.swift] Image named 'Upvote Large' is used in storyboard 'Contest', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct deposit {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Deposit", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct login {
      static var initialViewController: LoginVC? { return instance.instantiateInitialViewController() as? LoginVC }
      static var instance: UIStoryboard { return UIStoryboard(name: "Login", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "Facebook") != nil, "[R.swift] Image named 'Facebook' is used in storyboard 'Login', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct main {
      static var initialViewController: UITabBarController? { return instance.instantiateInitialViewController() as? UITabBarController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: _R.hostingBundle) }
      static var uITabBarControllerDYKKaXuJ: UITabBarController? { return instance.instantiateViewControllerWithIdentifier("UITabBarController-dYK-ka-xuJ") as? UITabBarController }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(uITabBarControllerDYKKaXuJ != nil, "[R.swift] ViewController with identifier 'uITabBarControllerDYKKaXuJ' could not be loaded from storyboard 'Main' as 'UITabBarController'.")
      }
    }
    
    struct profile {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Profile", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "Profile Tab") != nil, "[R.swift] Image named 'Profile Tab' is used in storyboard 'Profile', but couldn't be loaded.")
        assert(UIImage(named: "Comment") != nil, "[R.swift] Image named 'Comment' is used in storyboard 'Profile', but couldn't be loaded.")
        assert(UIImage(named: "Upvote Large") != nil, "[R.swift] Image named 'Upvote Large' is used in storyboard 'Profile', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct root {
      static var initialViewController: RootViewController? { return instance.instantiateInitialViewController() as? RootViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Root", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "Volley.Linkings") }
  
  struct nib {
    
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct StoryboardSegueIdentifier<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct TypedStoryboardSegueInfo<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let destinationViewController: Destination
  let identifier: String?
  let segue: Segue
  let sourceViewController: Source
  
  var description: String { return identifier ?? "" }
  
   init?(segue: UIStoryboardSegue) {
    guard let segue = segue as? Segue, sourceViewController = segue.sourceViewController as? Source, destinationViewController = segue.destinationViewController as? Destination else { return nil }
    self.segue = segue
    self.identifier = segue.identifier
    self.sourceViewController = sourceViewController
    self.destinationViewController = destinationViewController
  }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}

extension UIViewController {
  func performSegueWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>, sender: AnyObject?) {
    performSegueWithIdentifier(identifier.identifier, sender: sender)
  }
}

extension UIStoryboardSegue {
  func typedInfoWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>) -> TypedStoryboardSegueInfo<Segue, Source, Destination>? {
    guard self.identifier == identifier.identifier else { return nil }
    return TypedStoryboardSegueInfo(segue: self)
  }
}